"use client";
import { Pagination } from "@/components/pagination";
import Wrapper from "@/app/(user)/user-layout";
import { ArrowLeft, ArrowRight } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { CodeSnippet } from "@/components/code-snippet";

export default function HomePage() {
  return (
    <>
      <Wrapper>
        <div className=" top-0 justify-end right-0  flex space-x-2">
          <Link href="/resources/types">
            <Button variant="outline" size="icon" aria-label="Previous page">
              <ArrowLeft className="h-4 w-4" />
            </Button>
          </Link>

          <Link href="/resources/aggregated">
            <Button variant="outline" size="icon" aria-label="Next page">
              <ArrowRight className="h-4 w-4" />
            </Button>
          </Link>
        </div>
        {/* {  contents  } */}
        <div className="mx-auto max-w-4xl p-6">
          {/* Resource Overview */}
          <h2 className="text-2xl font-bold mb-4">Resource Overview</h2>
          <p className="mb-6">
            Resources are the core building blocks of the Data Tool. They define
            what data is pulled, how it’s filtered, and how integrity is
            enforced:
          </p>
          <h3 className="text-lg text-pretty font-bold mb-2">
            Resource Variables
          </h3>
          <ul className="list-disc list-inside mb-6">
            <li>Dynamic parameters for flexible pulls.</li>
          </ul>
          <h3 className="text-lg text-pretty font-bold mb-2">
            Resource Columns
          </h3>
          <ul className="list-disc list-inside mb-6">
            <li>
              Schema and validation rules for consistent, high-quality
              ingestion.
            </li>
          </ul>
          <p className="mb-6">
            Combined with Filters and Joins, resources form a scalable framework
            for multi-source reconciliation and reporting.
          </p>

          {/* Resource Types and Categories */}
          <h2 className="text-2xl font-bold mb-4">
            Resource Types and Categories
          </h2>
          <p className="mb-6">
            Resources are the foundational components of the Data Tool. Each
            resource defines how data is sourced, structured, and prepared for
            analysis or validation. Resources fall into three primary categories
            based on their origin and purpose:
          </p>

          <h3 className="text-lg text-pretty font-bold mb-2">
            1. System Resources
          </h3>
          <p className="mb-2">
            System Resources are direct connections to upstream systems or
            databases. They provide raw data as it exists in source platforms.
          </p>
          <ul className="list-disc list-inside mb-2">
            <li>Direct SQL queries to internal trade systems.</li>
            <li>
              Pulls from HRMS, CRM, or ledger platforms (e.g., Workday,
              Salesforce).
            </li>
            <li>SFTP-hosted batch files.</li>
          </ul>
          <p className="mb-6">
            <span className="font-bold">Purpose:</span> Establish a single
            source of truth for operational and regulatory workflows.
          </p>

          <h3 className="text-lg text-pretty font-bold mb-2">
            2. File-Based Resources
          </h3>
          <p className="mb-2">
            File-Based Resources import data from structured files or reports,
            typically delivered on a defined cadence.
          </p>
          <ul className="list-disc list-inside mb-2">
            <li>
              CSV, Parquet, or XML files generated by clearing houses or
              custodians.
            </li>
            <li>Regulatory or accounting data feeds.</li>
            <li>
              Daily operational extracts (positions, transactions, reference
              data).
            </li>
          </ul>
          <p className="mb-6">
            <span className="font-bold">Purpose:</span> Enable ingestion of
            static or semi-static datasets that complement system-level data.
          </p>

          {/* Configuring a Resource */}
          <h2 className="text-2xl font-bold mb-4">Configuring a Resource</h2>

          <h3 className="text-lg text-pretty font-bold mb-2">
            1. Define the Resource
          </h3>
          <ul className="list-disc list-inside mb-4">
            <li>Select the source system (database, SFTP folder, etc.).</li>
            <li>Specify the table or file path to pull from.</li>
          </ul>

          <h3 className="text-lg text-pretty font-bold mb-2">
            2. Set Resource Columns
          </h3>
          <ul className="list-disc list-inside mb-4">
            <li>Declare expected columns, data types, and required fields.</li>
            <li>Define unique keys for de-duplication and indexing.</li>
            <li>
              Apply format validations (e.g., currency code length, date
              formats).
            </li>
          </ul>

          <h3 className="text-lg text-pretty font-bold mb-2">
            3. Add Resource Variables
          </h3>
          <ul className="list-disc list-inside mb-4">
            <li>
              Introduce parameters using <code>$VARIABLE_NAME$</code> syntax
              (e.g., <code>$AS_OF_DATE$</code>).
            </li>
            <li>Configure variables to prompt at runtime or auto-update.</li>
          </ul>

          <h3 className="text-lg text-pretty font-bold mb-2">
            4. Apply Filters
          </h3>
          <ul className="list-disc list-inside mb-4">
            <li>
              Duplicate the resource as needed and set SQL-style filters to
              segment data (e.g., <code>region = 'EMEA'</code>).
            </li>
            <li>
              Use filters for regional, business-line, or product-specific
              slices.
            </li>
          </ul>

          <h3 className="text-lg text-pretty font-bold mb-2">
            5. Validate and Execute
          </h3>
          <ul className="list-disc list-inside mb-6">
            <li>Apply business rules to enforce domain-specific logic.</li>
            <li>
              Run the pull to confirm data aligns with schema, quality, and
              operational controls.
            </li>
            <li>Review validation errors directly in the results screen.</li>
          </ul>

          {/* Resource Configuration - Filter Rules */}
          <h2 className="text-2xl font-bold mb-4">Resource Configuration</h2>
          <h3 className="text-lg text-pretty font-bold mb-2">
            3.3.1 Filter Rules – Targeted Data Views
          </h3>
          <p className="mb-4">
            Filter Rules allow users to generate multiple, focused views from a
            single data connection, reducing duplication and improving
            efficiency when working with large datasets.
          </p>

          <h3 className="text-lg text-pretty font-bold mb-2">How It Works</h3>
          <ul className="list-disc list-inside mb-4">
            <li>
              <span className="font-bold">
                Single Connection, Multiple Views:
              </span>{" "}
              Configure a connection once, then duplicate it to apply unique
              filter conditions without modifying the original setup.
            </li>
            <li>
              <span className="font-bold">Streamlined Configuration:</span>{" "}
              Quickly isolate subsets of data without reconfiguring fields or
              rebuilding connections.
            </li>
          </ul>

          <h3 className="text-lg text-pretty font-bold mb-2">Example</h3>
          <p className="mb-4">
            You can create multiple copies of a resource and apply distinct
            filters to each (e.g., <code>region = 'EMEA'</code>) to view only
            the relevant subset of records.
          </p>

          <h3 className="text-lg text-pretty font-bold mb-2">Implementation</h3>
          <p className="mb-4">
            Filters are written in straightforward SQL-like syntax:{" "}
          </p>
          <CodeSnippet code="region = 'EMEA'" />
          <br />
          <p>
            This ensures only rows matching the specified criteria are
            displayed.
          </p>

          <h3 className="text-lg text-pretty font-bold mb-2">Key Advantages</h3>
          <ul className="list-disc list-inside mb-6">
            <li>Simplifies management of large datasets.</li>
            <li>Enables focused, role-specific data analysis.</li>
            <li>Reduces redundant setup and configuration efforts.</li>
          </ul>
        </div>
        {/* Pagination */}
        <Pagination
          currentPage={1}
          totalPages={5}
          previousLabel="Welcome"
          nextLabel="Installation Guide"
          previousHref="#"
          nextHref="#installation"
        />
      </Wrapper>
    </>
  );
}
