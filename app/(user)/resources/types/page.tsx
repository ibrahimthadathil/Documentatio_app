"use client";
import { Pagination } from "@/components/pagination";
import Wrapper from "@/app/(user)/user-layout";
import { ArrowLeft, ArrowRight } from "lucide-react";
import Link from 'next/link';
import { Button } from '@/components/ui/button';

export default function HomePage() {
  return (
    <>
      <Wrapper>
        <div className=" top-0 justify-end right-0  flex space-x-2">
            <Link href="/resources">
              <Button variant="outline" size="icon" aria-label="Previous page">
                <ArrowLeft className="h-4 w-4" />
              </Button>
            </Link>

            <Link href="/resources/configuration">
              <Button variant="outline" size="icon" aria-label="Next page">
                <ArrowRight className="h-4 w-4" />
              </Button>
            </Link>
          </div>
        {/* {  contents  } */}

                <div className="space-y-10">
      {/* Main Heading */}
      <h1 className="text-2xl font-bold mb-4">Resource Types and Categories</h1>
      <p className="text-muted-foreground mb-6">
        Resources are the foundational components of the Data Tool. Each resource defines how data is
        sourced, structured, and prepared for analysis or validation. Resources fall into three primary
        categories based on their origin and purpose:
      </p>

      {/* System Resources */}
      <h2 className="text-lg text-pretty font-bold mb-3">1. System Resources</h2>
      <p className="text-muted-foreground mb-4">
        System Resources are direct connections to upstream systems or databases. They provide raw data
        as it exists in source platforms.
      </p>
      <h3 className="text-lg text-pretty font-bold mb-2">Examples:</h3>
      <ul className="list-disc pl-6 space-y-2 mb-4">
        <li>Direct SQL queries to internal trade systems.</li>
        <li>Pulls from HRMS, CRM, or ledger platforms (e.g., Workday, Salesforce).</li>
        <li>SFTP-hosted batch files.</li>
      </ul>
      <p className="text-muted-foreground mb-6">
        <span className="font-semibold">Purpose:</span> Establish a single source of truth for
        operational and regulatory workflows.
      </p>

      {/* File-Based Resources */}
      <h2 className="text-lg text-pretty font-bold mb-3">2. File-Based Resources</h2>
      <p className="text-muted-foreground mb-4">
        File-Based Resources import data from structured files or reports, typically delivered on a
        defined cadence.
      </p>
      <h3 className="text-lg text-pretty font-bold mb-2">Examples:</h3>
      <ul className="list-disc pl-6 space-y-2 mb-4">
        <li>CSV, Parquet, or XML files generated by clearing houses or custodians.</li>
        <li>Regulatory or accounting data feeds.</li>
        <li>Daily operational extracts (positions, transactions, reference data).</li>
      </ul>
      <p className="text-muted-foreground">
        <span className="font-semibold">Purpose:</span> Enable ingestion of static or semi-static
        datasets that complement system-level data.
      </p>
        <br />
      {/* Configuring a Resource */}
      <h1 className="text-2xl font-bold mb-4"> Quick Start :Configuring a Resource</h1>

      {/* Step 1: Define the Resource */}
      <h2 className="text-lg text-pretty font-bold mb-3">1. Define the Resource</h2>
      <ul className="list-disc pl-6 space-y-2 mb-6">
        <li>Select the source system (database, SFTP folder, etc.).</li>
        <li>Specify the table or file path to pull from.</li>
      </ul>

      {/* Step 2: Set Resource Columns */}
      <h2 className="text-lg text-pretty font-bold mb-3">2. Set Resource Columns</h2>
      <ul className="list-disc pl-6 space-y-2 mb-6">
        <li>Declare expected columns, data types, and required fields.</li>
        <li>Define unique keys for de-duplication and indexing.</li>
        <li>Apply format validations (e.g., currency code length, date formats).</li>
      </ul>

      {/* Step 3: Add Resource Variables */}
      <h2 className="text-lg text-pretty font-bold mb-3">3. Add Resource Variables</h2>
      <ul className="list-disc pl-6 space-y-2 mb-6">
        <li>
          Introduce parameters using <code>$VARIABLE_NAME$</code> syntax (e.g.,
          <code>$AS_OF_DATE$</code>).
        </li>
        <li>Configure variables to prompt at runtime or auto-update.</li>
      </ul>

      {/* Step 4: Apply Filters */}
      <h2 className="text-lg text-pretty font-bold mb-3">4. Apply Filters</h2>
      <ul className="list-disc pl-6 space-y-2 mb-6">
        <li>
          Duplicate the resource as needed and set SQL-style filters to segment data (e.g.,
          <code>region = 'EMEA'</code>).
        </li>
        <li>Use filters for regional, business-line, or product-specific slices.</li>
      </ul>

      {/* Step 5: Validate and Execute */}
      <h2 className="text-lg text-pretty font-bold mb-3">5. Validate and Execute</h2>
      <ul className="list-disc pl-6 space-y-2">
        <li>Apply business rules to enforce domain-specific logic.</li>
        <li>Run the pull to confirm data aligns with schema, quality, and operational controls.</li>
        <li>Review validation errors directly in the results screen.</li>
      </ul>
    </div>
        {/* Pagination */}
        <Pagination
          currentPage={1}
          totalPages={5}
          previousLabel="Welcome"
          nextLabel="Configuration"
          previousHref="#"
          nextHref="/resources/configuration"
        />
      </Wrapper>
    </>
  );
}
